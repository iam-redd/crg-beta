{"version":3,"file":"static/js/602.82282f6d.chunk.js","mappings":"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","sources":["pages/admin/AllUsers/searchBar/SearchBar.js","pages/admin/AllUsers/AllUsers.js","../node_modules/@heroicons/react/24/outline/esm/MagnifyingGlassIcon.js"],"sourcesContent":["import { MagnifyingGlassIcon } from '@heroicons/react/24/outline'\nimport { Input, Button, ButtonGroup, Typography } from '@material-tailwind/react'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setSelectedUsers } from '../../../../store/slices/forAdmin'\nexport default function SearchBar() {\n    const allUsers = useSelector(state => state.forAdmin.allUsers)\n    const userInfo = useSelector(state => state.user.userInfo)\n    const dispatch = useDispatch()\n    function filter(value = '') {\n        if (value === '') {\n            dispatch(setSelectedUsers(allUsers))\n        } else if (value === 'мои') {\n            const template = allUsers.filter(user => user.manager.id === userInfo._id)\n            dispatch(setSelectedUsers(template))\n        } else {\n            const template = allUsers.filter(user => user.role === value)\n            dispatch(setSelectedUsers(template))\n        }\n    }\n\n    function searchItem(value) {\n        if (value === '') dispatch(setSelectedUsers(allUsers))\n        let temp = value.split('')\n        temp[0] === '+' ? temp = temp.splice(1, temp.length).join('') : temp = temp.join('')\n        console.log(temp)\n        const template = allUsers.filter((user, index) => {\n            let str = user.phoneNumber.split('')\n            str[0] === '+' ? str = str.slice(1, str.length).join('') : str = str.join('')\n            return !str.search(temp)\n        })\n        dispatch(setSelectedUsers(template))\n    }\n\n    return (\n        <>\n\n            <div className='flex flex-col items-center sm:flex-row gap-1 mb-2 justify-center md:justify-between md:mx-5'>\n                <div className='flex items-center gap-2'>\n                    <Typography className='text-sm flex w-min'>Сортировка:</Typography>\n                    <ButtonGroup variant='text' ripple={true} className='flex-col sm:flex-row justify-center md:justify-normal'>\n\n\n                        <Button\n                            onClick={() => filter()}\n                        >\n                            Все\n                        </Button>\n\n                        <Button\n                            onClick={() => filter('superUser')}\n                        >\n                            ОПТ\n                        </Button>\n\n                        <Button\n                            onClick={() => filter('user')}\n                        >\n                            Розница\n                        </Button>\n                        <Button\n                            onClick={() => filter('мои')}\n                        >\n                            Мои\n                        </Button>\n                    </ButtonGroup>\n                </div>\n                <div className='w-72 mx-auto sm:mx-0'>\n                    <Input icon={<MagnifyingGlassIcon className=\"h-5 w-5\" />} onInput={(e) => searchItem(e.target.value)} label=\"Поиск по номеру телефона\" />\n                </div>\n            </div>\n        </>\n    )\n}\n","import { useState } from 'react'\nimport * as React from 'react';\nimport axios from '../../../store/axios'\nimport { useEffect } from 'react'\nimport { DefaultSpinner } from '../../../components/Spinner'\nimport { useNavigate } from 'react-router-dom';\nimport SearchBar from './searchBar/SearchBar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { editAllUsers, setCurrentUser } from '../../../store/slices/forAdmin';\nimport {\n  Card,\n  CardHeader,\n  Typography,\n  Button,\n  CardBody,\n  CardFooter,\n  Avatar,\n  Select,\n  Option,\n} from \"@material-tailwind/react\";\nimport icon from '../../../assets/icons/user.png'\nimport url from '../../../default.json'\nimport { toast } from 'react-toastify';\nimport { UserIcon } from '@heroicons/react/24/outline';\nexport default function AllUsers() {\n  const notifyError = (text) => toast.error(text);\n  const userInfo = useSelector(state => state.user.userInfo)\n  const TABLE_HEAD = [\"Пользователь\", \"Контакты\", \"Статус\", 'Состояния'];\n\n  const navigate = useNavigate()\n  const [isSucccess, setSecccess] = useState(true)\n  const [isLoading, setLoading] = useState(true)\n  const [managers, setManagers] = useState(null)\n  const selectedUsers = useSelector(state => state.forAdmin.selectedUsers)\n  const dispatch = useDispatch()\n  async function getAllUsersFunc() {\n    try {\n      const data = await axios.post('/get/all-users')\n      if (data.status === 200) {\n        dispatch(editAllUsers(data.data))\n        setLoading(false)\n      } else {\n        notifyError('Ошибка')\n      }\n    } catch (error) {\n      console.log(error.message)\n      notifyError(error.message)\n      // navigate('/')\n    }\n  }\n\n  async function block(id, bool) {\n    try {\n      const response = await axios.patch(`${bool ? '/unlock-user  ' : '/block-user'}`, {\n        user: id\n      })\n\n      if (response.status === 200) {\n        getAllUsersFunc()\n      }\n    }\n    catch (err) {\n      console.log(err)\n    }\n  }\n\n\n\n  async function levelUp(id) {\n    try {\n      console.log(id)\n      setSecccess(false)\n      const request = await axios.patch('/user/level-up', {\n        currentUserId: id\n      })\n      if (request.status === 403) {\n        console.log('status 404')\n      }\n\n      if (request.status === 200) {\n        getAllUsersFunc()\n      }\n      setSecccess(true)\n    } catch (error) {\n      console.log(error.message)\n\n    }\n  }\n  async function getAllManagers() {\n    const { data } = await axios.get('/managers')\n    console.log(data)\n    setManagers(data)\n  }\n\n  managers === null && getAllManagers()\n\n  // isLoading && selectedUsers[0].avatarUrl !== '' && console.log(`${url.backendUrl}/${selectedUsers[0].avatarUrl}`)\n\n  async function changeManagerForUser(id, manager) {\n    try {\n      console.log(id, manager)\n      const response = await axios.post('/change-manager', { id, manager })\n      console.log(response)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    selectedUsers === null && getAllUsersFunc()\n    selectedUsers !== null && setLoading(false)\n  }, [setLoading, getAllUsersFunc, selectedUsers]);\n\n  return (\n    <div>\n      {\n        !isLoading ? <div className=\"\">\n\n          <Card className=\"h-full w-full\">\n            <CardHeader floated={false} shadow={false} className=\"rounded-none\">\n              <div className=\"mb-8 flex justify-center\">\n                <div>\n                  <Typography variant=\"h5\" color=\"blue-gray\">\n                    Список пользователей\n                  </Typography>\n                  <Typography color=\"gray\" className=\"mt-1 font-normal\">\n                    Тут можно посмотреть историю покупок пользователей или дать статус ОПТ\n                  </Typography>\n                </div>\n              </div>\n              <SearchBar />\n            </CardHeader>\n            <CardBody className=\"overflow-scroll p-0 mt-6\">\n              <table className=\"w-full min-w-max table-auto text-left\">\n                <thead>\n                  <tr>\n                    {TABLE_HEAD.map((head) => (\n                      <th\n                        key={head._id}\n                        className=\"border-y border-blue-gray-100 bg-blue-gray-50/50 p-4\"\n                      >\n                        <Typography\n                          variant=\"small\"\n                          color=\"blue-gray\"\n                          className=\"font-normal leading-none opacity-70\"\n                        >\n                          {head}\n                        </Typography>\n                      </th>\n                    ))}\n                    {\n                      userInfo !== null && userInfo.role === 'admin' ? <th\n                        className=\"border-y border-blue-gray-100 bg-blue-gray-50/50 p-4\"\n                      >\n                        <Typography\n                          variant=\"small\"\n                          color=\"blue-gray\"\n                          className=\"font-normal leading-none opacity-70\"\n                        >\n                          Менеджер\n                        </Typography>\n                      </th> : <></>}\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    selectedUsers.map(\n\n                      (row, index) => {\n                        const id = row._id\n                        const isLast = index === selectedUsers.length - 1;\n                        const classes = isLast\n                          ? \"p-4\"\n                          : \"p-4 border-b border-blue-gray-50\";\n\n                        return (\n                          <tr key={id}>\n                            <td className={classes}>\n                              <div className=\"flex items-center gap-3\">\n                                <Avatar src={row.avatarUrl !== '' ? `${url.backendUrl}/${row.avatarUrl}` : icon} alt={row.name} size=\"sm\"\n                                  className='cursor-pointer'\n                                  onClick={() => {\n                                    dispatch(setCurrentUser(row))\n                                    navigate(`/admin/all-users/${id}`)\n                                  }}\n                                />\n\n                                <div className=\"flex flex-col\">\n                                  <Typography\n                                    variant=\"small\"\n                                    color=\"blue-gray\"\n                                    className=\"font-normal cursor-pointer\"\n                                    onClick={() => {\n                                      dispatch(setCurrentUser(row))\n                                      navigate(`/admin/all-users/${id}`)\n                                    }}\n                                  >\n                                    {row.name}\n                                  </Typography>\n                                  <Typography\n                                    variant=\"small\"\n                                    color=\"blue-gray\"\n                                    className=\"font-normal opacity-70\"\n                                  >\n                                    {row.role}\n                                  </Typography>\n                                </div>\n                              </div>\n                            </td>\n                            <td className={classes}>\n                              <div className=\"flex flex-col\">\n                                <Typography\n                                  variant=\"small\"\n                                  color=\"blue-gray\"\n                                  className=\"font-normal\"\n                                >\n                                  {row.phoneNumber}\n                                </Typography>\n                                <Typography\n                                  variant=\"small\"\n                                  color=\"blue-gray\"\n                                  className=\"font-normal opacity-70\"\n                                >\n                                  {row.email}\n                                </Typography>\n                                <Typography\n                                  variant=\"small\"\n                                  color=\"blue-gray\"\n                                  className=\"font-normal\"\n                                >\n                                  {row.telegram}\n                                </Typography>\n                                <Typography\n                                  variant=\"small\"\n                                  color=\"blue-gray\"\n                                  className=\"font-normal opacity-70\"\n                                >\n                                  {row.organization}\n                                </Typography>\n                              </div>\n                            </td>\n                            <td className={classes}>\n                              <div className=\"w-max\">\n                                {row.role === 'user' ?\n                                  <button\n                                    className='text-green-700 hover:text-white border border-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-bolder rounded-lg text-xs px-3 py-2 text-center me-2 mb-2 dark:border-green-500 dark:text-green-500 dark:hover:text-white dark:hover:bg-green-600 dark:focus:ring-green-800'\n                                    disabled={!isSucccess}\n                                    onClick={() => isSucccess && levelUp(id)}>\n                                    ДАТЬ ОПТ\n                                  </button> : <>\n                                    {\n                                      row.role === 'superUser' ? <Button variant='outlined' size='sm' disabled={true}>УЖЕ ОПТ</Button> :\n                                        <Button variant='outlined' size='sm' disabled={true}>Staff</Button>\n                                    }\n                                  </>}\n                              </div>\n                            </td>\n                            <td className={classes}>\n                              {row.role !== 'admin' && <div className=\"w-max\">\n                                {row.isActive ?\n                                  <div\n                                    className={`text-red-700 hover:text-white border border-red-400 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-bolder rounded-lg text-xs px-3 py-2 text-center me-2 mb-2 dark:red-green-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-600 dark:focus:ring-red-800`}\n                                    onClick={() => block(id, false)}>\n                                    Заблокировать\n                                  </div> : <div\n                                    className={`text-green-700 hover:text-white border border-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-bolder rounded-lg text-xs px-3 py-2 text-center me-2 mb-2 dark:border-green-500 dark:text-green-500 dark:hover:text-white dark:hover:bg-green-600 dark:focus:ring-green-800`}\n                                    onClick={() => block(id, true)}>\n                                    Активировать\n                                  </div>}\n                              </div>}\n                            </td>\n                            {\n                              managers !== null && userInfo.role === 'admin' ?\n                                <td>\n                                  <Select\n                                    label='Менеджер'\n                                    value={row.manager.name}\n                                    onChange={(e) => changeManagerForUser(row._id, e)}>\n                                    {\n                                      managers.map((manager, index) => {\n                                        return (\n                                          <Option value={manager.name} key={index}>{manager.name}</Option>\n                                        )\n                                      })\n                                    }\n                                  </Select>\n                                </td> : <></>}\n                          </tr>\n                        );\n                      },\n                    )}\n                </tbody>\n              </table>\n            </CardBody>\n            <CardFooter className=\"flex items-center justify-between border-t border-blue-gray-50 p-4\">\n              <Typography variant=\"small\" color=\"blue-gray\" className=\"font-normal\">\n                Page 1 of 10\n              </Typography>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outlined\" size=\"sm\">\n                  Previous\n                </Button>\n                <Button variant=\"outlined\" size=\"sm\">\n                  Next\n                </Button>\n              </div>\n            </CardFooter>\n          </Card>\n        </div>\n          : <DefaultSpinner />\n      }\n    </div>\n\n  )\n}\n\n// function ManagerBlock() {\n//   const [manager, setManager] = useState('')\n//   return (\n//     <></>\n//   )\n// }\n\n\n","import * as React from \"react\";\nfunction MagnifyingGlassIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z\"\n  }));\n}\nconst ForwardRef = React.forwardRef(MagnifyingGlassIcon);\nexport default ForwardRef;"],"names":["SearchBar","allUsers","useSelector","state","forAdmin","userInfo","user","dispatch","useDispatch","filter","value","arguments","length","undefined","setSelectedUsers","template","manager","id","_id","role","_jsx","_Fragment","children","_jsxs","className","Typography","ButtonGroup","variant","ripple","Button","onClick","Input","icon","MagnifyingGlassIcon","onInput","e","temp","split","splice","join","console","log","index","str","phoneNumber","slice","search","searchItem","target","label","AllUsers","notifyError","text","toast","error","navigate","useNavigate","isSucccess","setSecccess","useState","isLoading","setLoading","managers","setManagers","selectedUsers","async","getAllUsersFunc","data","axios","post","status","editAllUsers","message","block","bool","patch","concat","err","get","getAllManagers","useEffect","DefaultSpinner","Card","CardHeader","floated","shadow","color","CardBody","map","head","row","classes","Avatar","src","avatarUrl","url","alt","name","size","setCurrentUser","email","telegram","organization","disabled","request","currentUserId","levelUp","isActive","Select","onChange","response","changeManagerForUser","Option","CardFooter","React","_ref","svgRef","title","titleId","props","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d"],"sourceRoot":""}