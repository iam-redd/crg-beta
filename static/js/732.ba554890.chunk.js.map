{"version":3,"file":"static/js/732.ba554890.chunk.js","mappings":"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","sources":["pages/CodeVerify/CodePage.js"],"sourcesContent":["import { Button, Input } from '@material-tailwind/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from '../../store/axios'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addData, setRegister } from '../../store/slices/userSlice';\nimport CryptoJS from 'crypto-js';\nimport secretKey from '../../default.json'\nimport { toast } from 'react-toastify';\nconst CodePage = ({setCodeFormVisible }) => {\n    const [value, setValue] = useState(null)\n    const [ErrorText, setError] = useState('')\n    const [time, setTime] = useState(300); // 5 минут = 300 секунд\n    const [isRunning, setIsRunning] = useState(true);\n    const timerRef = useRef(null);\n    const userInfo = useSelector(state => state.user.register)\n    const dispatch = useDispatch()\n    const notify = (text) => toast.error(text)\n    async function handleVerify(e) {\n        try {\n            e.preventDefault()\n            setError('')\n\n            let options = Object.assign({}, userInfo, { code: value.target.value.trim() })\n            console.log(options)\n            const response = await axios.post('/verify-code', options)\n            console.log(response)\n            if (response.status === 200) {\n                const str = JSON.stringify(response.data)\n                const ciphertext = CryptoJS.AES.encrypt(str, secretKey.secretKey).toString();\n                window.localStorage.setItem('data', JSON.stringify(ciphertext))\n                window.localStorage.setItem('token', JSON.stringify(response.data.token))\n                dispatch(addData(response.data))\n                dispatch(setRegister(null))\n                setCodeFormVisible(false)\n            }\n        } catch (err) {\n            console.log(err)\n            if (err?.response) {\n                if (err?.response?.data?.message) {\n                    console.log(err.response.data.message)\n                    setError(err.response.data.message)\n                }\n            }\n        }\n    }\n\n    const sendAgain = async () => {\n        try {\n            console.log(userInfo)\n            const response = await axios.post(`/send-code`, userInfo)\n            if (response.status === 200) {\n                resetHandler()\n            }\n        } catch (err) {\n            console.log(err)\n            if (err?.response?.data?.message) {\n                notify(err.response.data.message)\n            } else {\n                notify(err)\n            }\n        }\n    }\n\n    const resetHandler = () => {\n        setIsRunning(false);\n        setTime(300);\n        setTimeout(() => setIsRunning(true), 0); // Restart the timer immediately\n    };\n\n    const formatTime = (time) => {\n        const getSeconds = `0${time % 60}`.slice(-2);\n        const minutes = Math.floor(time / 60);\n        const getMinutes = `0${minutes % 60}`.slice(-2);\n\n        return `${getMinutes} : ${getSeconds}`;\n    };\n\n    useEffect(() => {\n        if (isRunning && time > 0) {\n            timerRef.current = setInterval(() => {\n                setTime((prevTime) => prevTime - 1);\n            }, 1000);\n        } else {\n            clearInterval(timerRef.current);\n        }\n        return () => clearInterval(timerRef.current);\n    }, [isRunning, time]);\n    return (\n        <div>\n            <form onSubmit={handleVerify} className='w-full m-auto h-full md:w-80 lg:h-2/6 border rounded-xl p-4 mt-10 md:mt-8' style={{backgroundColor:'#FFFFFF'}}>\n                <h2 className='text-center my-4 font-bold '>Верификация</h2>\n\n                <p className='text-sm my-2 text-center'>{formatTime(time)}</p>\n                <Input className='' label='Введите код' name='code' onInput={(e) => setValue(e)} />\n                <div className='mt-4' >\n                    <p className='text-xs my-2'>{\n                        userInfo?.phoneNumber ? `Введите код из 6 цифр отправленного на номер ${userInfo.phoneNumber.split('')[0] + userInfo.phoneNumber.split('')[1] + userInfo.phoneNumber.split('')[2] + userInfo.phoneNumber.split('')[3] + ('*****') + userInfo.phoneNumber.split('')[11] + userInfo.phoneNumber.split('')[12]}` : 'Введите код из 6 цифр отправленного на номер /Номер пользователя ****//'\n                    }</p>\n                    <p className='text-xs my-2 text-red-500'>{ErrorText}</p>\n                    <div className='flex items-center gap-4' >\n                        <Button\n                            className='mt-4 mx-auto'\n                            variant='outlined'\n                            size='md'\n                            color='red'\n                            type='submit'\n                        >Подтвердить\n                        </Button>\n                        <p\n                            color={time === 0 ? 'red' : 'blue-gray'}\n                            className='text-xs mt-4 cursor-pointer'\n                            onClick={() => time === 0 && sendAgain()}\n                        >Отправить повторно</p>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default CodePage;"],"names":["_ref","setCodeFormVisible","value","setValue","useState","ErrorText","setError","time","setTime","isRunning","setIsRunning","timerRef","useRef","userInfo","useSelector","state","user","register","dispatch","useDispatch","notify","text","toast","error","resetHandler","setTimeout","useEffect","current","setInterval","prevTime","clearInterval","_jsx","children","_jsxs","onSubmit","async","e","preventDefault","options","Object","assign","code","target","trim","console","log","response","axios","post","status","str","JSON","stringify","data","ciphertext","CryptoJS","encrypt","secretKey","toString","window","localStorage","setItem","token","addData","setRegister","err","_err$response","_err$response$data","message","className","style","backgroundColor","getSeconds","concat","slice","minutes","Math","floor","getMinutes","formatTime","Input","label","name","onInput","phoneNumber","split","Button","variant","size","color","type","onClick","_err$response2","_err$response2$data","sendAgain"],"sourceRoot":""}